1. 자식클래스에게 부모클래스를 상속 시켰는데 오류가 뜨는이유?
    오류가 뜬다면 그것은 부모클래스의 생성자가 매개변수를 받는 생성자이기 때문이다
    자식은 부모의 생성자를 상속받기 때문에 자식클래스 또한 매개변수를 받아야지 부모클래스의 생성자 역할을
    할수가 있다. 부모클래스가 가능한일을 자식 클래스에게서 구현을 못한다면 그것자체가 오류다

2. 오류를 없애는 방법
    ctrl + O 를 눌러 자식에게 부모 생성자를 물려받게 하거나, 부모생성자에게 매개변수를 받지않는 생성자를 하나
    생성해준다. 생성자 오버로드를 떠올려보자. 자식은 선택적으로 부모의 매개변수 없는 생성자를 선택할 것이다.

3. Overide의 기능
    Animal의 메서드인 speak 메서드는 "~가 소리를 냅니다"를 출력하도록 되어있다.
    하지만, 동물이 소리를 냅니다 라는 문장은 맞는말이긴해도 소리를 낸다는것은 포괄적인 개념이며 어색한 감이 있다.
    소리를 낸다는 기본적인 틀을 주고 동물들마다 다른 소리를 내는 메서드를 만든다면 좀 더 자연스러운 문장이 될것이다
    "멍멍이가 왕왕 짖습니다","고양이가 야옹 웁니다","소가 음메 웁니다" 같은 좀 더 구체적인 문장으로 말이다.
    이처럼 오버라이드는 부모 클래스의 메서드는 어떻게 작동하는지에대한 기본적인 틀을 제공하고 자식 클래스들은
    각자의 클래스의 특성에 맞게 메서드를 재정의 하는것이다.

 4. 다향성
    예를들어 Animal 객체에 Cat과 Dog 클래스 뿐만아니라 수백가지의 동물들의 클래스가 있다고 치자.
    이 동물들의 울음소리를 듣기 위해서 동물들클래스.speak();를 수백번을 반복해서 코드를 써야 한다.
    이들을 한거번에 묶어주는 무언가가 있고 그것으로 for문을 돌려 speak()를 호출 할수 있다면?
    이러기위해 필요한것이 다향성이다. Animal 동물들클래스 = new 동물들클래스();를 한다면
    Animal의 speak 메서드에는 참조하는 동물들의 클래스에 따라 그 동물들의 울음소리를 다 들을수 있다.
    와닿지 않겠지만 생각해보자 만약 Animal이라는 배열에 각각의 동물이 들어있고 그 요소 하나하나에는
    울음소리를 호출하는 메서드가 2차배열로써 들어있다고. 그럼 for문으로 Animal 배열의 요소들이 메서드를
    호출할수 있게 한다면? 한번에 수백마리의 동물의 울음소리를 호출할수 있을것이다.
    이런 의미에서의 유연성때문에 다향성은 유용하게 쓰일 수 있다.